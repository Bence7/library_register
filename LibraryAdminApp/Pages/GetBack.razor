@page "/getbackabook"
@using LibraryAdminApp.Services
@using ClassLibrary.Models
@inject IRentService RentService
@inject NavigationManager NavigationManager
<h3>Get back the rented books</h3>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private RentalModel? rental { get; set; }
    
    private IEnumerable<RentalModel>? allRent { get; set; }
    public static int counter { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        allRent = await RentService.getAllRentsAsync();
    }

    private async Task DeleteTask(int id)
    {
        await RentService.DeleteRentalAsync(id);
        counter--;
        NavigationManager.NavigateTo("/getbackabook", forceLoad:true);
    }

}

@if (allRent is null)
{
    <p>Loading...</p>
}
else
{
    counter = allRent.Count();

    if (counter>0)
    {
        <table class="table table-dark table-striped">
            <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Publisher</th>
                <th>Publish date</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var rent in allRent)
            {
                <tr>
                    <td>@rent.Book.Title</td>
                    <td>@rent.Book.Author</td>
                    <td>@rent.Book.Publisher</td>
                    <td>@rent.Book.PublishDate</td>
                    <td>
                        <button @onclick="(()=> DeleteTask(rent.Id))" class="btn btn-dark   ">DELETE</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>There are no rents now.</p>
    }
}